{"_id":"okay-error","_rev":"9-348fb1de610fa918c852e09b3766f8b0","name":"okay-error","dist-tags":{"latest":"1.0.2"},"versions":{"0.1.0":{"name":"okay-error","version":"0.1.0","author":{"name":"Henry Mao"},"license":"MIT","_id":"okay-error@0.1.0","maintainers":[{"name":"calclavia","email":"henry@calclavia.com"}],"dist":{"shasum":"7e34825f68801113bd3bd20fdd696a4a18f898ac","tarball":"https://registry.npmjs.org/okay-error/-/okay-error-0.1.0.tgz","fileCount":6,"integrity":"sha512-cipAfGhAO2IboWlOzLl1FMZkwqPSNSqQsHCaNb3c/A5ATLlKQ6xSzmody5cDFJe8zHFGVoXdJlGZ7MYBXXdfmA==","signatures":[{"sig":"MEUCIQCFOIt97FEJtnjGbiziAW78FqgKkTZAoTCq03scSHM0QgIgXAhg+TZgCDKQucf5At98rHHWBGP2XvERKVnuo1H92WM=","keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U"}],"unpackedSize":36048},"main":"dist/index.js","types":"src/index.ts","gitHead":"6922975442584a788ccec573f775d507142ce153","private":false,"scripts":{"test":"jest","build":"tsc","clean":"rm -rf dist","test:watch":"jest --watch","prepublishOnly":"npm run clean && npm run build"},"_npmUser":{"name":"calclavia","email":"henry@calclavia.com"},"_npmVersion":"10.9.2","description":"A small opinionated library to bring Rust-like results idiomatically to TypeScript.","directories":{},"_nodeVersion":"22.13.0","_hasShrinkwrap":false,"devDependencies":{"jest":"^29.5.0","ts-jest":"^29.1.0","typescript":"^5.0.4","@types/jest":"^29.5.1"},"_npmOperationalInternal":{"tmp":"tmp/okay-error_0.1.0_1747016970135_0.9148379239272684","host":"s3://npm-registry-packages-npm-production"}},"0.1.2":{"name":"okay-error","version":"0.1.2","author":{"name":"Henry Mao"},"license":"MIT","_id":"okay-error@0.1.2","maintainers":[{"name":"calclavia","email":"henry@calclavia.com"}],"dist":{"shasum":"0f5ea7d6a7bdffab9534148622dbff00206c8339","tarball":"https://registry.npmjs.org/okay-error/-/okay-error-0.1.2.tgz","fileCount":6,"integrity":"sha512-XfP2nwxSEtJKBvMMD5/g2q65/76KcB2kTmizrwypbErExS+4uCPzgBW278vdgiVIyqoXqTELO8BtGQZDcpyiug==","signatures":[{"sig":"MEQCIADVC9FcZ1tYCYXLTRchNL9w24bdthTTrSx+skuCJbU5AiBdbwGcMHm0zfZV3XCtYy1Wm4P7stE7Q2FR16L7LT4J3Q==","keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U"}],"unpackedSize":36048},"main":"dist/index.js","types":"src/index.ts","gitHead":"4513f57680de627a11ad3dbefd4a2ca121781c33","private":false,"scripts":{"test":"jest","build":"tsc","clean":"rm -rf dist","test:watch":"jest --watch","prepublishOnly":"npm run clean && npm run build"},"_npmUser":{"name":"calclavia","email":"henry@calclavia.com"},"_npmVersion":"10.9.2","description":"A small opinionated library to bring Rust-like results idiomatically to TypeScript.","directories":{},"_nodeVersion":"22.15.0","_hasShrinkwrap":false,"devDependencies":{"jest":"^29.5.0","ts-jest":"^29.1.0","typescript":"^5.0.4","@types/jest":"^29.5.1"},"_npmOperationalInternal":{"tmp":"tmp/okay-error_0.1.2_1747017031069_0.36332319718090744","host":"s3://npm-registry-packages-npm-production"}},"0.1.3":{"name":"okay-error","version":"0.1.3","author":{"name":"Henry Mao"},"license":"MIT","_id":"okay-error@0.1.3","maintainers":[{"name":"calclavia","email":"henry@calclavia.com"}],"dist":{"shasum":"8aea13302dad47cad1332f6f12419d91a3c9b99b","tarball":"https://registry.npmjs.org/okay-error/-/okay-error-0.1.3.tgz","fileCount":6,"integrity":"sha512-xOZFBIxW/0e8MjYSlRzpG0l6Naxk4LazP3Hm+REbB/ZZQGnvDDIl1XOXn87DihDGCtAScLnm6hEG1sUBzfPZ6Q==","signatures":[{"sig":"MEUCIQD9QDdx0kTao5yPYvVcUgKy1OeyhaNuyTEoUnpMaSzmrgIgCqU+V/kjEaN2j9ICNFuqiTuQ0kj7LYQKWEaub16XOA4=","keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U"}],"unpackedSize":36076},"main":"dist/index.js","types":"src/index.ts","gitHead":"8bd771f05ad4bab51c987625eb9576acd193fa78","private":false,"scripts":{"test":"jest","build":"tsc","clean":"rm -rf dist","test:watch":"jest --watch","prepublishOnly":"npm run clean && npm run build"},"_npmUser":{"name":"calclavia","email":"henry@calclavia.com"},"_npmVersion":"10.9.2","description":"A small opinionated library to bring Rust-like results idiomatically to TypeScript.","directories":{},"_nodeVersion":"22.15.0","_hasShrinkwrap":false,"devDependencies":{"jest":"^29.5.0","ts-jest":"^29.1.0","typescript":"^5.0.4","@types/jest":"^29.5.1"},"_npmOperationalInternal":{"tmp":"tmp/okay-error_0.1.3_1747017070410_0.22120063941228918","host":"s3://npm-registry-packages-npm-production"}},"0.1.4":{"name":"okay-error","version":"0.1.4","author":{"name":"Henry Mao"},"license":"MIT","_id":"okay-error@0.1.4","maintainers":[{"name":"calclavia","email":"henry@calclavia.com"}],"dist":{"shasum":"82ba3c7c1203b42239455a9d83e24879f3878f83","tarball":"https://registry.npmjs.org/okay-error/-/okay-error-0.1.4.tgz","fileCount":6,"integrity":"sha512-G1ssVZaifIR6AHWWiRuIVvYc1jlVg4ULEjYpE3ZD25wcIv/A1l0B3lcw8vW10UGy/OqL9bXtHv11T7VsSEBBEg==","signatures":[{"sig":"MEUCIQCFmEu37FM4By14J3PZRO0VndWDc+VbXAFG3DC+27EjtAIgMqbBW98xZOAZBwnIuePdcrPEk4FqkD/rd91HKLSjre8=","keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U"}],"unpackedSize":36195},"main":"dist/index.js","types":"src/index.ts","gitHead":"433210fc7c9fc3ec0a063a06ace41b0054bb9be3","private":false,"scripts":{"test":"jest","build":"tsc","clean":"rm -rf dist","test:watch":"jest --watch","prepublishOnly":"npm run clean && npm run build"},"_npmUser":{"name":"calclavia","email":"henry@calclavia.com"},"_npmVersion":"10.9.2","description":"A small opinionated library to bring Rust-like results idiomatically to TypeScript.","directories":{},"_nodeVersion":"22.15.0","_hasShrinkwrap":false,"devDependencies":{"jest":"^29.5.0","ts-jest":"^29.1.0","typescript":"^5.0.4","@types/jest":"^29.5.1"},"_npmOperationalInternal":{"tmp":"tmp/okay-error_0.1.4_1747019437280_0.2949973219911908","host":"s3://npm-registry-packages-npm-production"}},"0.1.5":{"name":"okay-error","version":"0.1.5","author":{"name":"Henry Mao"},"license":"MIT","_id":"okay-error@0.1.5","maintainers":[{"name":"calclavia","email":"henry@calclavia.com"}],"dist":{"shasum":"6813cc47e20b8fba425482ec56453ce5344aeafc","tarball":"https://registry.npmjs.org/okay-error/-/okay-error-0.1.5.tgz","fileCount":6,"integrity":"sha512-FX22R5YQmHUd9H1SrVcLxTjEMG1pVok0JMmVTUExc0Y8an6i6aRjiW0F6v1Bt7zb4WDxr0JzLaXLgk4FwLi2Dw==","signatures":[{"sig":"MEUCIChudtK06YCOyKnaUqJmTZdmW1tAghjIxVzFvM58+Pj4AiEAtf39O3rXJigGr86SJ/0WcDnBntBZiP4ELS2ja9fMm8Y=","keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U"}],"unpackedSize":36483},"main":"dist/index.js","types":"src/index.ts","gitHead":"e831b76053de6aeef7c59d1f53312e39a6336441","private":false,"scripts":{"test":"jest","build":"tsc","clean":"rm -rf dist","test:watch":"jest --watch","prepublishOnly":"npm run clean && npm run build"},"_npmUser":{"name":"calclavia","email":"henry@calclavia.com"},"_npmVersion":"10.9.2","description":"A small opinionated library to bring Rust-like results idiomatically to TypeScript.","directories":{},"_nodeVersion":"22.15.0","_hasShrinkwrap":false,"devDependencies":{"jest":"^29.5.0","ts-jest":"^29.1.0","typescript":"^5.0.4","@types/jest":"^29.5.1"},"_npmOperationalInternal":{"tmp":"tmp/okay-error_0.1.5_1747170276655_0.28082928448459654","host":"s3://npm-registry-packages-npm-production"}},"0.1.6":{"name":"okay-error","version":"0.1.6","author":{"name":"Henry Mao"},"license":"MIT","_id":"okay-error@0.1.6","maintainers":[{"name":"calclavia","email":"henry@calclavia.com"}],"dist":{"shasum":"cc4e0f87bc85bf9540cc48e0ff86c669fc1fbb22","tarball":"https://registry.npmjs.org/okay-error/-/okay-error-0.1.6.tgz","fileCount":6,"integrity":"sha512-Bvn7ObK6kIP69rsvlWc+xE18E2MfaBDIb8F3dWJzh2bwmr7rqHpoIsgl1On7VY+igthZ+zoviOW2C5FQDRqdsg==","signatures":[{"sig":"MEUCIQDd0I9IyCkit4WR7nLRZybTHXoJCyH0kBOXTuLaf5Ii/gIgPhWpoqzBWShAwGTp2PLI6wbAiAwvmVynJIQdO9kOBbM=","keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U"}],"unpackedSize":42414},"main":"dist/index.js","types":"src/index.ts","gitHead":"97bc3110144543febf4d8f3b46dd77bcbeb7b6da","private":false,"scripts":{"test":"jest","build":"tsc","clean":"rm -rf dist","test:watch":"jest --watch","prepublishOnly":"npm run clean && npm run build"},"_npmUser":{"name":"calclavia","email":"henry@calclavia.com"},"_npmVersion":"10.9.2","description":"A small opinionated library to bring Rust-like results idiomatically to TypeScript.","directories":{},"_nodeVersion":"22.15.0","_hasShrinkwrap":false,"devDependencies":{"jest":"^29.5.0","ts-jest":"^29.1.0","typescript":"^5.0.4","@types/jest":"^29.5.1"},"_npmOperationalInternal":{"tmp":"tmp/okay-error_0.1.6_1747180208131_0.9091162704699316","host":"s3://npm-registry-packages-npm-production"}},"0.2.1":{"name":"okay-error","version":"0.2.1","author":{"name":"Henry Mao"},"license":"MIT","_id":"okay-error@0.2.1","maintainers":[{"name":"calclavia","email":"henry@calclavia.com"}],"dist":{"shasum":"c26cc24cc7d87d6f0d21a7198a6ea8fdec152c1d","tarball":"https://registry.npmjs.org/okay-error/-/okay-error-0.2.1.tgz","fileCount":6,"integrity":"sha512-IiqDr56RFjzl5Bc/M9gOLKFTndqJbqdslqBuNTwelmJ85xFaJXYGtFpgjUMCNfg+kBc43ONXwPGTNjXhpKoHcg==","signatures":[{"sig":"MEUCIEkaMxbuowZl4XnAWeeAtl4wVSDZWAxaSCMIrs5iBPyFAiEAkChHlzXnJquv+aGc9WJ/EN8/vektC91U6f1AIhNRuis=","keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U"}],"unpackedSize":42532},"main":"dist/index.js","types":"src/index.ts","gitHead":"ba06c83035d0c4dfefe323029692eaa0391d5bb2","private":false,"scripts":{"test":"jest","build":"tsc","clean":"rm -rf dist","test:watch":"jest --watch","prepublishOnly":"npm run clean && npm run build"},"_npmUser":{"name":"calclavia","email":"henry@calclavia.com"},"_npmVersion":"10.9.2","description":"A small opinionated library to bring Rust-like results idiomatically to TypeScript.","directories":{},"_nodeVersion":"22.15.0","_hasShrinkwrap":false,"devDependencies":{"jest":"^29.5.0","ts-jest":"^29.1.0","typescript":"^5.0.4","@types/jest":"^29.5.1"},"_npmOperationalInternal":{"tmp":"tmp/okay-error_0.2.1_1747182393791_0.8722812215497182","host":"s3://npm-registry-packages-npm-production"}},"1.0.1":{"name":"okay-error","version":"1.0.1","author":{"name":"Henry Mao"},"license":"MIT","_id":"okay-error@1.0.1","maintainers":[{"name":"calclavia","email":"henry@calclavia.com"}],"dist":{"shasum":"5750f7e08613f27618a20bb7c1deda8f1fdb0cc2","tarball":"https://registry.npmjs.org/okay-error/-/okay-error-1.0.1.tgz","fileCount":6,"integrity":"sha512-oA1y/BBcoxITvLDP8Tg9XfXjveBuvZ3Zo8Nt9mqqr7vCRkFKwFVGo3+lmnhy10HcVuSyHUSvi8fOgqqQn4GJnw==","signatures":[{"sig":"MEUCIQDlQ/hDGBPmnoIrrsuyvkMbDnRmoxk7jfK0KbH6ELuqxgIgTGhaXlSQcdgm0W/e7e3m1k4AWykNUddJuQqrXcfmiHU=","keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U"}],"unpackedSize":22955},"main":"dist/index.js","types":"src/index.ts","gitHead":"01c34ffc128a32de61468642456d80cbddc10c99","private":false,"scripts":{"test":"jest","build":"tsc","clean":"rm -rf dist","test:watch":"jest --watch","prepublishOnly":"npm run clean && npm run build"},"_npmUser":{"name":"calclavia","email":"henry@calclavia.com"},"_npmVersion":"10.9.2","description":"A small opinionated library to bring Rust-like results idiomatically to TypeScript.","directories":{},"_nodeVersion":"22.15.0","_hasShrinkwrap":false,"devDependencies":{"jest":"^29.5.0","ts-jest":"^29.1.0","typescript":"^5.0.4","@types/jest":"^29.5.1"},"_npmOperationalInternal":{"tmp":"tmp/okay-error_1.0.1_1747282551792_0.9852918569685407","host":"s3://npm-registry-packages-npm-production"}},"1.0.2":{"name":"okay-error","version":"1.0.2","author":{"name":"Henry Mao"},"private":false,"description":"A small opinionated library to bring Rust-like results idiomatically to TypeScript.","main":"dist/index.js","types":"src/index.ts","scripts":{"build":"tsc","clean":"rm -rf dist","prepublishOnly":"npm run clean && npm run build","test":"jest","test:watch":"jest --watch"},"license":"MIT","devDependencies":{"@types/jest":"^29.5.1","jest":"^29.5.0","ts-jest":"^29.1.0","typescript":"^5.0.4"},"_id":"okay-error@1.0.2","gitHead":"02d3a716e561b5d5847ad4b96314e776d0f9cb18","_nodeVersion":"22.15.0","_npmVersion":"10.9.2","dist":{"integrity":"sha512-jbaUyzfqiOlVmrqNzxJhjNwdB2zDCtXFfIfYz49CHemPbOldo6mA7iDELiSZJkbxYj4KCmS8GdmGE6hhcjZ+Qg==","shasum":"7b91c9184d25195dee293821ef24221b56a3c844","tarball":"https://registry.npmjs.org/okay-error/-/okay-error-1.0.2.tgz","fileCount":6,"unpackedSize":22930,"signatures":[{"keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U","sig":"MEYCIQCL92i8dx+HvvAF2xDK0KupN+k+ktLGj4zWozNM6xlcVQIhAJ4c7jj3rh1CX9EpDzTzSEX9OBkuwqV9lvm9SMhCeYNp"}]},"_npmUser":{"name":"calclavia","email":"henry@calclavia.com"},"directories":{},"maintainers":[{"name":"calclavia","email":"henry@calclavia.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages-npm-production","tmp":"tmp/okay-error_1.0.2_1747328089600_0.06510036827846388"},"_hasShrinkwrap":false}},"time":{"created":"2025-05-12T02:29:30.078Z","modified":"2025-05-15T16:54:49.952Z","0.1.0":"2025-05-12T02:29:30.337Z","0.1.2":"2025-05-12T02:30:31.247Z","0.1.3":"2025-05-12T02:31:10.579Z","0.1.4":"2025-05-12T03:10:37.447Z","0.1.5":"2025-05-13T21:04:36.824Z","0.1.6":"2025-05-13T23:50:08.358Z","0.2.1":"2025-05-14T00:26:33.987Z","1.0.1":"2025-05-15T04:15:51.974Z","1.0.2":"2025-05-15T16:54:49.769Z"},"author":{"name":"Henry Mao"},"license":"MIT","description":"A small opinionated library to bring Rust-like results idiomatically to TypeScript.","maintainers":[{"name":"calclavia","email":"henry@calclavia.com"}],"readme":"# `okay-error`\n\n[![NPM Version](https://img.shields.io/npm/v/okay-error?style=flat-square)](https://www.npmjs.com/package/okay-error)\n\n> **Typed, chain‑friendly, JSON‑safe Results for TypeScript**  \n\nA small opinionated TypeScript library providing strongly-typed `Result` objects with chaining capabilities, inspired by Rust `std::result`.\n\n## Why *okay-error*?\n\n* **Plain object compatibility** - an `Ok` is `{ ok: true, value }`, an `Err` is `{ ok: false, error }`. Log it, persist it, send it over the wire.\n* **Type‑level errors** - every possible failure is visible in the function signature (`Result<T, E>`), not thrown from the shadows. Rely on the type checker to ensure you handle every possible failure.\n* **Cause‑chain built‑in** - link any parent error using the `cause()` helper; walk the `cause` links later to see the full logical call stack.\n* **Ergonomic** - helpers `map`, `flatMap`, `or` feel familiar to JS arrays.\n* **Re‑hydration** - after `JSON.parse`, call `result` to get a plain `Result` object.\n\n---\n\n## Table of Contents\n\n- [`okay-error`](#okay-error)\n  - [Why *okay-error*?](#why-okay-error)\n  - [Table of Contents](#table-of-contents)\n  - [Install](#install)\n  - [Quick tour](#quick-tour)\n    - [From try-catch to Result](#from-try-catch-to-result)\n    - [Propagating context](#propagating-context)\n      - [How cause works](#how-cause-works)\n    - [Working with async operations](#working-with-async-operations)\n  - [Feature checklist](#feature-checklist)\n  - [API reference](#api-reference)\n    - [Constructors](#constructors)\n    - [Functions](#functions)\n    - [Types](#types)\n  - [JSON round‑trip example](#json-roundtrip-example)\n  - [Error with cause example](#error-with-cause-example)\n  - [The `cause()` helper](#the-cause-helper)\n  - [Pattern matching example](#pattern-matching-example)\n    - [Pattern matching with `match`](#pattern-matching-with-match)\n    - [Type Safety and Exhaustiveness](#type-safety-and-exhaustiveness)\n  - [License](#license)\n\n---\n\n## Install\n\n```bash\nnpm i okay-error\n```\n\n---\n\n## Quick tour\n\n### From try-catch to Result\n\nHere's how `okay-error` changes error handling from exceptions to data:\n\n```ts\n// Traditional approach with try-catch\ntry {\n  const user = getUserById(123);\n  const greeting = formatGreeting(user.name);\n  console.log(greeting);\n} catch (error) {\n  // Error source and type information can be ambiguous\n  console.error('Something went wrong', error);\n}\n\n// Alternative approach with Result\nimport { ok, err, result, annotate } from 'okay-error';\n\n// Define functions that return Result types\nfunction getUserById(id: number) {\n  try {\n    if (id <= 0) {\n      return err('InvalidId', { id });\n    }\n    // Simulating database lookup\n    const user = { id, name: 'Ada' };\n    return ok(user);\n  } catch (error) {\n    // Convert any unexpected errors\n    return err('DbError', { cause: error });\n  }\n}\n\n// Using the Result-returning function\nconst userResult = getUserById(123);\nif (!userResult.ok) {\n  // Typed error handling with precise context\n  console.error(`Database error: ${userResult.error.type}`);\n  return;\n}\n\n// Chain operations on successful results\nconst greeted = userResult\n  .map(u => u.name.toUpperCase())         // Ok<string>\n  .flatMap(name =>\n    name.startsWith('A')\n      ? ok(`Hello ${name}!`)              // Return Ok for success\n      : err('NameTooShort', { min: 1 })   // Return Err for failure\n  )\n  .or('Hi stranger!');                    // Use fallback if any step failed\n\nconsole.log(greeted);                     // \"Hello ADA!\"\n```\n\n### Propagating context\n\nContext propagation allows you to wrap lower-level errors with higher-level context as they move up through your application's layers so you know where the error occurred.\n\n```ts\nfunction readConfig(): Result<string, ConfigErr> { /* ... */ }\n\nfunction boot(): Result<void, BootErr> {\n  const cfg = readConfig();\n  if (!cfg.ok) {\n    // Add higher-level context while preserving the original error\n    return err('BootConfig', { phase: 'init', ...cause(cfg) });\n  }\n  return ok();\n}\n```\n\n#### How cause works\n\n`cause` creates a new object `{ cause: error }` that can be spread into your error payload. This creates a discoverable, traceable error chain that's useful for debugging:\n\n```plain\nErr {\n  type: \"BootConfig\",\n  phase: \"init\",\n  cause: Err {\n    type: \"ConfigFileMissing\",\n    path: \"/etc/app.json\",\n    cause: Err { type: \"IO\", errno: \"ENOENT\" }\n  }\n}\n```\n\n### Working with async operations\n\n`okay-error` can be used with async code to handle errors as data:\n\n```ts\nimport { result } from 'okay-error';\n\n// Wrap fetch with Result to handle both network and parsing errors\nasync function fetchUserData(userId: string) {\n  // First, handle the network request\n  const response = await result(fetch(`/api/users/${userId}`));\n  if (!response.ok) {\n    return annotate(response, 'NetworkError', { userId });\n  }\n  \n  // Then handle the JSON parsing\n  const data = await result(response.value.json());\n  if (!data.ok) {\n    return annotate(data, 'ParseError', { userId });\n  }\n  \n  // Validate the data\n  if (!data.value.name) {\n    return err('ValidationError', { \n      userId,\n      message: 'User name is required'\n    });\n  }\n  \n  return ok(data.value);\n}\n\n// Usage with proper error handling\nasync function displayUserProfile(userId: string) {\n  const userData = await fetchUserData(userId);\n  \n  if (!userData.ok) {\n    // Each error has context about where it happened\n    switch (userData.error.type) {\n      case 'NetworkError':\n        console.error('Connection failed');\n        break;\n      case 'ParseError':\n        console.error('Invalid response format');\n        break;\n      case 'ValidationError':\n        console.error(userData.error.message);\n        break;\n    }\n    return;\n  }\n  \n  // Work with the data safely\n  console.log(`Welcome, ${userData.value.name}!`);\n}\n```\n\n---\n\n## Feature checklist\n\n| ✔                                  | Feature                                 | Example |\n| ---------------------------------- | --------------------------------------- | ------- |\n| Typed constructors                 | `err({ type: 'Timeout', ms: 2000 })` or `err('Timeout', { ms: 2000 })`          |\n| `map`, `flatMap`, `or`             | `ok(1).map(x=>x+1).flatMap(fn).or(0)`   |\n| Works with **Promise**             | `await result(fetch(url))`              |\n| Cause‑chain + optional stack frame | `annotate(err(...), 'DB', {...})`       |\n| JSON serialisable                  | `JSON.stringify(err('X', {}))`          |\n| Re‑hydrate after JSON              | `const plain = result(JSON.parse(raw))` |\n\n---\n\n## API reference\n\n### Constructors\n\n| function              | purpose                                                   |\n| --------------------- | --------------------------------------------------------- |\n| `ok(value)`           | success result                                            |\n| `err(type, payload?)` | typed error, payload is merged with `{ type }` |\n| `err({ ... })`        | error from arbitrary value (object, string, etc) |\n| `result(x)`           | wrap a sync fn, a Promise, **or** re‑hydrate a raw object |\n\n### Functions\n\n| function                           | purpose                                             |\n| ---------------------------------- | --------------------------------------------------- |\n| `cause(error)`                     | wrap an error as a cause for another error          |\n| `match(result, { ok, err })`       | pattern match on Result (success/failure)           |\n| `match(type, cases)`               | pattern match on a discriminant string (exhaustive) |\n\n### Types\n\n```ts\ntype Result<T, E = unknown> = Ok<T> | Err<E>;\n```\n\n---\n\n## JSON round‑trip example\n\n```ts\nconst errOut = err('DbConn', { host: 'db.local' }); // preferred\nconst raw = JSON.stringify(errOut);\n\nconst back = result(JSON.parse(raw)); // re‑hydrated\n```\n\n## Error with cause example\n\n```ts\nimport { err, cause } from 'okay-error';\n\n// Preferred: use err(type, payload) and cause()\nconst ioError = err('IO', { errno: 'ENOENT' });\nconst configError = err('ConfigFileMissing', { path: '/etc/app.json', ...cause(ioError) });\nconst bootError = err('BootConfig', { phase: 'init', ...cause(configError) });\n\n// You can also chain inline:\nconst chained = err('BootConfig', cause(\n  err('ConfigFileMissing', cause(\n    err('IO', { errno: 'ENOENT' })\n  ))\n));\n\n// Now you can navigate the error chain\nconsole.log(bootError.error.type);    // 'BootConfig'\nconsole.log(bootError.error.cause.type); // 'ConfigFileMissing'\n```\n\n---\n\n## The `cause()` helper\n\nThe `cause(error)` function is the idiomatic way to link any parent error as the cause of the current error—this parent could be a lower-level error, a related error, or any error that led to the current one:\n\n```ts\nconst base = err('Base', { info: 123 })\nconst wrapped = err('Higher', { ...cause(base), context: 'extra' })\n\n// wrapped.error.cause === base\n```\n\nThis is preferred over annotate, and is composable for deep error chains.\n\n## Pattern matching example\n\n### Pattern matching with `match`\n\nThe `match` function is overloaded:\n- Use `match(result, { ok, err })` to branch on Result objects.\n- Use `match(type, { ...cases })` to branch on discriminant string unions (exhaustive, type-safe).\n- `matchType` is now an alias for the discriminant string overload for backwards compatibility.\n\n```ts\n// Result matching\nconst result = divide(10, 2);\nconst message = match(result, {\n  ok: (value) => `Result: ${value}`,\n  err: (error) => `Error: ${error.message}`\n});\n\nconsole.log(result); // \"Result: 5\"\n\n// With an error case\nconst errorResult = divide(10, 0).match({\n  ok: (value) => `Result: ${value}`,\n  err: (error) => `Error: ${error.message}`\n});\n\nconsole.log(errorResult); // \"Error: Cannot divide by zero\"\n```\n\n\n### Type Safety and Exhaustiveness\n\nWhen using `match` with a discriminant string union, TypeScript will enforce exhaustiveness, ensuring you handle all possible cases. This provides an additional layer of type safety for error handling.\n\n```ts\n// Define a discriminated union of error types\ntype ApiError =\n  | { type: 'NotFound'; id: string }\n  | { type: 'Timeout'; ms: number }\n  | { type: 'Unauthorized'; reason: string };\n\n// Function that returns different error types\nfunction fetchData(id: string): Result<{ name: string }, ApiError> {\n  // ...\n}\n\n// Use match to handle each error type differently\nconst response = fetchData('slow');\n\nif (!response.ok) {\n  const errorMessage = match(response.error.type, {\n    NotFound: () => `Item ${response.error.id} could not be found`,\n    Timeout: () => `Request timed out after ${response.error.ms}ms`,\n    Unauthorized: () => `Access denied: ${response.error.reason}`\n  });\n  \n  console.log(errorMessage); // \"Request timed out after 5000ms\"\n}\n\n// Warning: match requires a discriminated union\n// If you're not using a discriminated union, use match instead\n```\n\n## License\n\nMIT","readmeFilename":"README.md"}